{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Personalized Loss\n",
    "In the following, we present a case to show how to incorporate the personalized loss and plug it into different DRO losses."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## f-divergence DRO\n",
    "Across f-divergence DRO, the adaptive loss can be easily modified as follows. Below, we modify the standard loss into the quantile regression:\n",
    "$\\ell((\\theta, b);(X, Y)) = 3(Y - \\theta^{\\top}X - b)^+ + (\\theta^{\\top}X + b - Y)^+$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'theta': [-0.4889100722052225, 0.0], 'b': array(1.9556403)}\n",
      "{'theta': [-0.4710318069318671, 0.0], 'b': array(1.88412726)}\n",
      "{'theta': [-0.4651670885521472, 0.0], 'b': array(1.86066836)}\n",
      "{'theta': [-0.4620192280358392, 0.0], 'b': array(1.84807691)}\n",
      "{'theta': [-0.4599744797051139, 0.0], 'b': array(1.83989792)}\n"
     ]
    }
   ],
   "source": [
    "import cvxpy as cp\n",
    "import numpy as np\n",
    "from dro.src.linear_model.wasserstein_dro import *\n",
    "from dro.src.linear_model.chi2_dro import *\n",
    "X = np.array([[1, 1], [2, 1], [3, 1], [4,1]])\n",
    "y = np.array([1, 1, 0, 0])\n",
    "model = Chi2DRO(input_dim = 2, model_type = 'quantile')\n",
    "\n",
    "\n",
    "from types import MethodType\n",
    "\n",
    "def _loss(self, X, y):\n",
    "    return 3 * np.maximum(y - X @ self.theta - self.b, 0) + np.maximum(X @ self.theta + self.b - y, 0)\n",
    "\n",
    "def _cvx_loss(self, X, y, theta, b):\n",
    "    return 3 * cp.pos(y - X @ theta - b) + 1 * cp.pos(X @ theta + b - y)\n",
    "\n",
    "model._loss = MethodType(_loss, model)\n",
    "model._cvx_loss = MethodType(_cvx_loss, model)\n",
    "for k in range(5):\n",
    "    model.update({'eps': 0.05 * (k + 1)})\n",
    "    print(model.fit(X, y))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Wasserstein DRO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "For more complicated losses, such as hr-dro and wasserstein-dro, where the loss difference changes with the inner function fit, it has not been implemented yet."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Uncontextual and Contextual Robust Learning:\n",
    "- uncontextual: by taking $X$ as a 1-d unit one vector\n",
    "- contextual: newsvendor (the same as quantile regression); portfolio "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.7 ('base')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "40d3a090f54c6569ab1632332b64b2c03c39dcf918b08424e98f38b5ae0af88f"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
